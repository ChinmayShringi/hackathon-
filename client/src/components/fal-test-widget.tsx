import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Image, AlertCircle } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

export default function FalTestWidget() {
  const [prompt, setPrompt] = useState("a beautiful sunset over mountains, photorealistic, high quality");
  const [result, setResult] = useState<any>(null);
  const { toast } = useToast();

  const testMutation = useMutation({
    mutationFn: async (testPrompt: string) => {
      return await apiRequest("/api/test-generation", "POST", { prompt: testPrompt });
    },
    onSuccess: (data) => {
      setResult(data);
      toast({
        title: "Success!",
        description: "FAL API integration working correctly",
      });
    },
    onError: (error) => {
      console.error("Test failed:", error);
      toast({
        title: "Test Failed",
        description: "FAL API integration needs attention",
        variant: "destructive",
      });
    },
  });

  const handleTest = () => {
    if (!prompt.trim()) {
      toast({
        title: "Error",
        description: "Please enter a prompt",
        variant: "destructive",
      });
      return;
    }
    setResult(null);
    testMutation.mutate(prompt);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Image className="h-5 w-5" />
          FAL/Flux1 API Test
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2">
          <Input
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Enter your image prompt..."
            className="flex-1"
          />
          <Button 
            onClick={handleTest}
            disabled={testMutation.isPending}
          >
            {testMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Testing...
              </>
            ) : (
              "Test API"
            )}
          </Button>
        </div>

        {testMutation.isPending && (
          <div className="flex items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-lg">
            <div className="text-center">
              <Loader2 className="mx-auto h-8 w-8 animate-spin text-blue-500" />
              <p className="mt-2 text-sm text-gray-600">
                Generating image with FAL/Flux1...
              </p>
            </div>
          </div>
        )}

        {result?.success && result?.result && (
          <div className="space-y-4">
            <div className="text-sm text-green-600 font-medium">
              âœ… API Integration Working!
            </div>
            
            {result.result.images && result.result.images.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium">Generated Image:</h4>
                <img
                  src={result.result.images[0].url}
                  alt="Generated by FAL/Flux1"
                  className="w-full max-w-lg rounded-lg border shadow-sm"
                  onError={(e) => {
                    e.currentTarget.style.display = 'none';
                  }}
                />
                <div className="text-xs text-gray-500">
                  Size: {result.result.images[0].width}x{result.result.images[0].height} | 
                  Inference: {result.result.timings?.inference}s |
                  Seed: {result.result.seed}
                </div>
              </div>
            )}

            <details className="text-xs">
              <summary className="cursor-pointer text-gray-600 hover:text-gray-800">
                View Raw Response
              </summary>
              <pre className="mt-2 p-2 bg-gray-50 rounded text-xs overflow-x-auto">
                {JSON.stringify(result.result, null, 2)}
              </pre>
            </details>
          </div>
        )}

        {testMutation.isError && (
          <div className="flex items-center gap-2 p-4 border border-red-200 bg-red-50 rounded-lg">
            <AlertCircle className="h-5 w-5 text-red-500" />
            <div>
              <p className="text-sm font-medium text-red-800">
                API Test Failed
              </p>
              <p className="text-xs text-red-600">
                Check console for details or verify FAL API key
              </p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}